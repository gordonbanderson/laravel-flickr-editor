{"version":3,"sources":["webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/constants.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/Screen.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrSets.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrPhotoThumbnail.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrSet.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrPhoto.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/IntroPage.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/HomePanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/orphaned/OrphanedPanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/unimported/UnimportedPanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/status/StatusPanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/orphaned/NewFlickrSetForm.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrPhotoOrphanThumbnail.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/orphaned/PhotosForDatePanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/App.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/index.js"],"names":["GET_IMPORTED_FLICKR_SET_LIST","gql","GET_UNIMPORTED_FLICKR_SET_LIST","GET_FLICKR_PHOTO","GET_FLICKR_SET_PHOTOS","GET_FLICKR_SET_PHOTO_IDS","GET_AMOUNT_OF_ORPHAN_PHOTOS_BY_DAY","GET_ORPHANED_PHOTOS_BY_DAY","CREATE_FLICKR_SET","ADD_PHOTOS_TO_FLICKR_SET","KEY","FLICKR_SET_SCREEN","FLICKR_PHOTO_SCREEN","setScreen","name","window","localStorage","setItem","getScreen","getItem","props","useQuery","loading","error","data","console","log","Helmet","className","imported_flickr_sets","map","title","id","imported","to","onClick","FlickrPhotoThumbnail","setID","src","small_url","defaultProps","editable","useParams","variables","parseInt","photos","flickr_set","flickrPhotos","forEach","photo","Image","large_url","index","small_height","UPDATE_PHOTO","useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","React","addEventListener","removeEventListener","FlickrPhotoForm","leftKeyPressCount","setLeftKeyPressCount","rightKeyPressCount","setRightKeyPressCount","history","useHistory","titleInput","setTitleInput","description","descriptionInput","setDescriptionInput","leftPress","rightPress","useEffect","ids","photoIDS","indexOf","Number","prevID","url","push","nextID","length","updatePhoto","useMutation","e","preventDefault","toast","value","onChange","target","PrevPhotoLink","previousID","set_id","NextPhotoLink","theNextID","setInfo","result","getFlickrPhotoIDsAndTitle","setPhotoIDS","flickr_photo","href","position","selectedTab","children","HOME_TAB","Tab","setSelectedTab","link","amountsByDate","number_of_orphaned_photos_by_date","graphData","i","row","x","y","amount_of_photos","label","date_of_photos","dependentAxis","tickFormat","labelComponent","style","fill","events","eventHandlers","clickedProps","datum","unimported_flickr_sets","Pusher","require","Echo","broadcaster","wsHost","location","hostname","wsPort","forceTLS","disableStats","channel","listen","createFlickrSet","addPhotosToSet","photoIDs","then","response","photo_ids","addPhotosToFlickrSet","date","photos_by_date","client","ApolloClient","uri","cache","InMemoryCache","ApolloProvider","path","exact","render","document","getElementById"],"mappings":"4SAGO,IAIMA,GAA+BC,QAAH,yIAY5BC,GAAiCD,QAAH,2IAY9BE,GAAmBF,QAAH,yTAiBhBG,GAAwBH,QAAH,gcAqBrBI,GAA2BJ,QAAH,uMAYxBK,GAAqCL,QAAH,gJAQlCM,GAA4BN,QAAF,4PAa1BO,GAAoBP,QAAH,2OAUjBQ,GAA2BR,QAAH,2a,oBC/G/BS,EAAI,sBAEGC,EAAkB,aAClBC,EAAoB,eAIpBC,EAAY,SAACC,GACtBC,OAAOC,aAAaC,QAAQP,EAAKI,IAGxBI,EAAY,WACrB,OAAOH,OAAOC,aAAaG,QAAQT,I,UCqBvC,QA3BA,SAAoBU,GAAQ,OACSC,cAASrB,GAAlCsB,EADgB,EAChBA,QAASC,EADO,EACPA,MAAOC,EADA,EACAA,KAExB,OAAIF,GAAgB,sCAChBC,GAAc,qCAElBE,QAAQC,IAAIF,GAIZC,QAAQC,IAAI,qBAAsBR,MAE3B,4BACH,SAACS,EAAA,EAAD,WAAQ,8CACR,eAAIC,UAAU,YAAd,4BAEA,wBACCJ,EAAKK,qBAAqBC,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,EAAcC,SAAd,OAC3B,yBACI,UAAC,KAAD,CAAMC,GAAI,oBAAoBF,EAAIG,QAAStB,EAAUF,GAArD,iBAA8EoB,MADzEC,a,cCpBrB,SAASI,EAAqBhB,GACxB,OAAO,SAAC,KAAD,CAAMc,GAAI,sBAAsBd,EAAMY,GAA5B,QAAyCZ,EAAMiB,MAAOF,QAAStB,EAAUD,GAAnF,UAAyG,gBAAK0B,IAAKlB,EAAMmB,UAAWR,MAAOX,EAAMW,UAG9JK,EAAqBI,aAAe,CAChCC,UAAU,GAGd,UC6BA,QAnCA,WAAqB,IACVT,GAAMU,UAANV,GADU,GAIgBX,cAASjB,EAAuB,CAC7DuC,UAAW,CAAEX,GAAIY,SAASZ,EAAG,OADzBV,EAJS,EAITA,QAASC,EAJA,EAIAA,MAAOC,EAJP,EAIOA,KAKxB,GAAIF,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,oCAElB,IAAIsB,EAAOrB,EAAKsB,WAAWC,aAS1B,OANGF,EAAOG,SAAQ,SAACC,IACA,IAAIC,OACZZ,IAAMW,EAAME,cAId,4BACN,SAACxB,EAAA,EAAD,WAAQ,qCAAaH,EAAKsB,WAAWf,YACpC,eAAIH,UAAU,YAAd,SAA2BJ,EAAKsB,WAAWf,SAC5C,eAAIH,UAAY,kCAAhB,SACCiB,EAAOf,KAAI,WAAyCsB,GAAzC,IAAGrB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIO,EAAd,EAAcA,UAAd,EAAyBc,aAAzB,OACR,eAAazB,UAAW,WAAxB,UACI,SAAC,EAAD,CAAsBI,GAAIA,EAAKK,MAAOb,EAAKsB,WAAWd,GAAIO,UAAWA,EAAWR,MAAOA,EAAOU,UAAU,KADnGT,Y,qkCCtBrB,I,IAAMsB,GAAerD,QAAH,I,EAAG,iN,kBAAH,E,2EAaZsD,EAAc,SAASC,GAAW,SACAC,eAAS,GADT,GAC7BC,EAD6B,KACjBC,EADiB,KAGpC,SAASC,EAAT,GAA8B,EAAPC,MACPL,GACRG,GAAc,GAItB,IAAMG,EAAY,SAAC,GAAY,EAAVD,MAELL,GACRG,GAAc,IActB,OAVAI,aAAgB,WAIZ,OAHAhD,OAAOiD,iBAAiB,UAAWJ,GACnC7C,OAAOiD,iBAAiB,QAASF,GAE1B,WACH/C,OAAOkD,oBAAoB,UAAWL,GACtC7C,OAAOkD,oBAAoB,QAASH,MAEzC,IAEIJ,GAGLQ,EAAkB,SAAC9C,GAAU,WACmBqC,cAAS,GAD5B,GACxBU,EADwB,KACLC,EADK,UAEqBX,cAAS,GAF9B,GAExBY,EAFwB,KAEJC,EAFI,KAI3BC,GAAUC,UACVvB,EAAQ7B,EAAM6B,MAElBpC,EAAUD,GAPqB,SASK6C,cAASR,EAAMlB,OATpB,GASxB0C,EATwB,KASZC,EATY,UAUiBjB,cAASR,EAAM0B,aAVhC,GAUxBC,EAVwB,KAUNC,EAVM,KAWzBC,EAAYvB,EAAY,aACxBwB,EAAaxB,EAAY,eAG/ByB,gBAAU,WACN,IAAIC,EAAM7D,EAAM8D,SACZ9B,EAAO6B,EAAIE,QAAQC,OAAOnC,EAAMjB,KAChCqD,EAASjC,EAAQ,EAAI6B,EAAI7B,EAAM,GAAK,KAKxC,GAAIe,GAAqB,GAArBA,MAA0BkB,EAAyC,CACnE,IAAIC,EAAI,sBAAwBD,EAAS,QAAWjE,EAAMiB,MAC1DkC,EAAQgB,KAAKD,QAEbhB,EAAsB,GAG1BF,EAAqBD,EAAkB,KAGxC,CAACW,KAEJE,gBAAU,WACN,IAAIC,EAAM7D,EAAM8D,SAEZ9B,EAAO6B,EAAIE,QAAQC,OAAOnC,EAAMjB,KAChCwD,EAASpC,EAAQ6B,EAAIQ,OAAO,EAAIR,EAAI7B,EAAM,GAAK,KAKnD,GAAIiB,GAAsB,GAAtBA,MAA2BmB,EAAyC,CACpE,IAAIF,EAAI,sBAAwBE,EAAS,QAAWpE,EAAMiB,MAC1DkC,EAAQgB,KAAKD,QAEblB,EAAqB,GAGzBE,EAAsBD,EAAmB,KAG1C,CAACU,IAIJ,IAiBOW,EA3EwB,GA2ETC,iBAAYrC,GA3EH,MA6E/B,OACI,uBAAM1B,UAAU,aAAhB,YAAuC,aAAvC,gBAA8D,SAACgE,GAC3DA,EAAEC,iBACFH,EAAY,CAAC/C,UAAW,CAACX,GAAIY,SAASK,EAAMjB,IAAKD,MAAO0C,EAAYE,YAAaC,MACjFkB,QAAM,gCAHV,iBAKI,kBACIlE,UAAU,eACVmE,MAAOtB,EACPuB,SAAU,SAAAJ,GAAC,OAAKlB,EAAckB,EAAEK,OAAOF,WAG3C,qBACInE,UAAU,eACVmE,MAAOnB,EACPoB,SAAU,SAAAJ,GAAC,OAAKf,EAAoBe,EAAEK,OAAOF,WAGjD,mBAAQnE,UAAW,0BAAnB,oBAjBJ,KAoCFsE,EAAgB,SAAC9E,GACnB,IAbY6D,EAAKjD,EAEboB,EAWA+C,GAbQlB,EAaY7D,EAAM6D,IAbbjD,EAakBZ,EAAMY,IAXrCoB,EAAO6B,EAAIE,QAAQC,OAAOpD,KACf,EAAIiD,EAAI7B,EAAM,GAAK,MAWlC,OAAsB,OAAf+C,EAAsB,MAAO,gBAAKvE,UAAW,eAAhB,UAAgC,SAAC,KAAD,CAAMM,GAAI,sBAAwBiE,EAAa,QAAU/E,EAAMgF,OAA/D,kBAGlEC,EAAgB,SAACjF,GACnB,IAZY6D,EAAKjD,EAEboB,EAUAkD,GAZQrB,EAYW7D,EAAM6D,IAZZjD,EAYiBZ,EAAMY,IAVpCoB,EAAO6B,EAAIE,QAAQC,OAAOpD,KACfiD,EAAIQ,OAAO,EAAIR,EAAI7B,EAAM,GAAK,MAU7C,OAAqB,OAAdkD,EAAoB,MAAO,iBAAK1E,UAAW,WAAhB,eAA6B,SAAC,KAAD,CAAMM,GAAI,sBAAwBoE,EAAY,QAAUlF,EAAMgF,OAA9D,mBAoDnE,QA9BA,SAAqBhF,GAAO,OACJsB,UAAbV,EADiB,EACjBA,GAAGoE,EADc,EACdA,OAGNG,EAtB0B,SAACH,GAAW,OACT/E,cAAShB,EAA0B,CAChEsC,UAAW,CAAEX,GAAIY,SAASwD,EAAO,OAD7B9E,EADkC,EAClCA,QAASC,EADyB,EACzBA,MAAOC,EADkB,EAClBA,KAIxB,GAAIF,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,oCAElB,IACM0D,EADgBzD,EAAKsB,WAAWC,aACVjB,KAAI,SAAAmB,GAAK,OAAImC,OAAOnC,EAAMjB,OAElDwE,EAAS,GAGb,OAFAA,EAAM,IAAUvB,EAChBuB,EAAM,MAAYhF,EAAKsB,WAAWf,MAC3ByE,EAQOC,CAA0BL,GACpCM,EAAcH,EAAO,IALD,GAOSlF,cAASlB,EAAkB,CACxDwC,UAAW,CAAEX,GAAIY,SAASZ,EAAG,OADzBV,EAPgB,EAOhBA,QAASC,EAPO,EAOPA,MAAOC,EAPA,EAOAA,KAKxB,GAAIF,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,oCAElB,IAAI0B,EAAQzB,EAAKmF,aAEjB,OAAO,iBAAK/E,UAAW,cAAhB,WAA+B,SAACD,EAAA,EAAD,WAAQ,uCAAesB,EAAMlB,YAC/D,eAAIH,UAAW,YAAf,UAA4B,cAAGgF,KAAM,oBAAsBR,EAA/B,SAAwCG,EAAQxE,WACxE,gBAAIH,UAAW,OAAf,eAAoCqB,EAAMlB,UAC9C,iBAAKH,UAAW,QAAhB,WACA,gBAAKU,IAAKW,EAAME,UAAWpB,MAAOkB,EAAMlB,SACxC,SAACmE,EAAD,CAAelE,GAAIA,EAAIiD,IAAKyB,EAAaN,OAAQA,KACjD,SAACC,EAAD,CAAerE,GAAIA,EAAIiD,IAAKyB,EAAaN,OAAQA,QAEjD,SAAClC,EAAD,CAAiBjB,MAAOA,EAAOiC,SAAUwB,EAAarE,MAAO+D,KAC7D,SAAC,KAAD,CAAgBS,SAAU,sBCxMlC,QAfA,SAAmBzF,GAAQ,IAChB0F,EAAyB1F,EAAzB0F,YACP,OADgC1F,EAAZ2F,SAChBD,IAAgBE,IACT,4BACH,eAAIpF,UAAW,OAAf,uCADG,kBAICkF,KAID,M,28BCdR,IAAME,GAAS,OAMhBC,GAAM,SAAA7F,GAAS,IACV0F,EAAyC1F,EAAzC0F,YAAaI,EAA4B9F,EAA5B8F,eAA4B9F,EAAZ2F,SAEpC,OADAtF,QAAQC,IAAI,YAAaN,IAClB,mBAAQQ,UAAW,OAASR,EAAMN,OAASgG,EAAc,UAAY,IAAK3E,QAAS,WAAO+E,EAAe9F,EAAMN,OAA/G,UACH,SAAC,KAAD,CAAMoB,GAAId,EAAM+F,KAAhB,SAAuB/F,EAAMN,UAsBrC,SAlBA,SAAmBM,GAAQ,UAEeqC,cAASuD,IAFxB,GAEhBF,EAFgB,KAEHI,EAFG,KAIvB,OAAO,4BACH,SAACvF,EAAA,EAAD,WAAQ,gDACJ,iBAAKC,UAAW,4BAAhB,WACI,SAACqF,GAAD,CAAKnG,KAAMkG,GAAUG,KAAM,UAAWD,eAAgBA,EAAgBJ,YAAaA,KACnF,SAACG,GAAD,CAAKnG,KArBG,qBAqBsBqG,KAAM,oBAAqBD,eAAgBA,EAAiBJ,YAAaA,KACvG,SAACG,GAAD,CAAKnG,KArBO,yBAqBsBqG,KAAM,sBAAuBD,eAAgBA,EAAiBJ,YAAaA,KAC7G,SAACG,GAAD,CAAKnG,KArBJ,yBAqBsBqG,KAAM,wBAAyBD,eAAgBA,EAAiBJ,YAAaA,KACpG,SAACG,GAAD,CAAKnG,KArBJ,SAqBsBqG,KAAM,iBAAkBD,eAAgBA,EAAiBJ,YAAaA,QAEjG,SAAC,EAAD,CAAWA,YAAaA,Q,gDC6BpC,SApDA,SAAuB1F,GACnB,IAAImD,GAAUC,UADa,GAGMnD,cAASf,GAAlCgB,EAHmB,EAGnBA,QAASC,EAHU,EAGVA,MAAOC,EAHG,EAGHA,KAExB,GAAIF,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,oCAElBE,QAAQC,IAAIF,GAKZ,IAFA,IAAI4F,EAAgB5F,EAAK6F,kCACrBC,EAAY,GACPC,EAAE,EAAGA,EAAGH,EAAc3B,OAAQ8B,IAAK,CACxC,IAAIC,EAAM,CAACC,EAAEF,EAAE,EAAGG,EAAEN,EAAcG,GAAGI,iBAAkBC,MAAOR,EAAcG,GAAGM,gBAC/EP,EAAU/B,KAAKiC,GAInB,OAAO,4BACH,SAAC7F,EAAA,EAAD,WAAQ,kDACL,eAAIC,UAAW,YAAf,8BACH,UAAC,KAAD,YAEI,SAAC,KAAD,CACIkG,eAAa,EAEbC,WAAY,SAACN,GAAD,OAAOA,MAEvB,SAAC,KAAD,CACIO,gBAAgB,SAAC,KAAD,IAChBC,MAAO,CAAEzG,KAAM,CAAE0G,KAAM,SACvB1G,KAAM8F,EAENa,OAAQ,CACJ,CACIlC,OAAQ,OACRmC,cAAe,CACXjG,QAAS,SAACyD,EAAGyC,GACT5G,QAAQC,IAAI,cAAe2G,EAAaC,MAAMV,OAC9CrD,EAAQgB,KAAM,yBAA2B8C,EAAaC,MAAMV,oBCd5F,SA3BA,SAAyBxG,GAAQ,OACIC,cAASnB,GAAlCoB,EADqB,EACrBA,QAASC,EADY,EACZA,MAAOC,EADK,EACLA,KAExB,OAAIF,GAAgB,sCAChBC,GAAc,qCAElBE,QAAQC,IAAIF,GAIZC,QAAQC,IAAI,qBAAsBR,MAE3B,4BACH,SAACS,EAAA,EAAD,WAAQ,yDACR,eAAIC,UAAU,YAAd,8BAEA,wBACCJ,EAAK+G,uBAAuBzG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,EAAcC,SAAd,OACzB,yBACI,SAAC,KAAD,CAAMC,GAAI,aAAaF,EAAIG,QAAStB,EAAUF,GAA9C,SAAmEoB,KAD9DC,a,eCpBzBjB,OAAOyH,OAASC,EAAQ,MAExB1H,OAAO2H,KAAO,IAAIA,KAAK,CACnBC,YAAa,SACb9E,IAAK,aACL+E,OAAQ7H,OAAO8H,SAASC,SACxBC,OAAQ,KACRC,UAAU,EACVC,cAAc,IAwClB,SAlCA,SAAqB7H,GA0BjB,OAzBA4D,gBAAU,WAmBN,OAlBAvD,QAAQC,IAAI,2BAEZX,OAAO2H,KAAKQ,QAAQ,iBAAiBC,OAAO,mBAAmB,SAACvD,GAC5DnE,QAAQC,IAAI,2BAA4BkE,MAEvCuD,OAAO,SAAQ,SAACvD,GACbnE,QAAQC,IAAI,OAAQkE,MAGvBuD,OAAO,mBAAkB,SAACvD,GACvBnE,QAAQC,IAAI,iBAAkBkE,MAGjCuD,OAAO,oBAAmB,SAACvD,GACxBnE,QAAQC,IAAI,wBAAyBkE,MAItC,WACHnE,QAAQC,IAAI,8BAKb,4BACH,SAACC,EAAA,EAAD,WAAQ,+CACL,eAAIC,UAAW,OAAf,8B,4jCCkCX,SA3EyB,SAACR,GAAU,MAE5BmD,GAAUC,UAFkB,MAIIf,cAASrC,EAAMW,OAJnB,GAIzB0C,EAJyB,KAIbC,EAJa,WAKgBjB,cAAS,IALzB,GAKzBmB,EALyB,KAKPC,EALO,KAyBzBuE,EAzByB,IAyBNzD,iBAAYnF,GAzBN,MA0BzB6I,EA1ByB,IA0BP1D,iBAAYlF,GA1BL,MA2BhCgB,QAAQC,IAAI,uBAAwBN,GACpC,IAAMkI,EAAWlI,EAAMyB,OAAOf,KAAI,SAAAmB,GAAK,OAAImC,OAAOnC,EAAMjB,OAExD,OACI,4BACA,qBAAMJ,UAAU,aAAhB,iBAAuC,aAAvC,iBAA8D,SAACgE,GAC3DA,EAAEC,iBACFuD,EAAgB,CAACzG,UAAW,CAAEZ,MAAO0C,EAAYE,YAAaC,KACzD2E,MAAK,SAACC,IACH1D,QAAM,sBAENrE,QAAQC,IAAI,UAAY8H,EAAShI,KAAK4H,iBACtC,IAAI/G,EAAQ+C,OAAOoE,EAAShI,KAAK4H,gBAAgBpH,IACjDP,QAAQC,IAAI,SAAUW,GACtBZ,QAAQC,IAAI,gCAAiC4H,GAE7CD,EAAe,CAAC1G,UAAW,CAAEX,GAAIK,EAAOoH,UAAWH,KAC9CC,MAAK,SAACC,IACH1D,QAAM,gBACNrE,QAAQC,IAAI,4BAA6B8H,GACzCjF,EAAQgB,KAAK,oBAAsBiE,EAAShI,KAAKkI,qBAAqB1H,aAf1F,kBAsBI,kBACIJ,UAAU,eACVmE,MAAOtB,EACPuB,SAAU,SAAAJ,GAAC,OAAKlB,EAAckB,EAAEK,OAAOF,WAG3C,qBACInE,UAAU,eACVmE,MAAOnB,EACPoB,SAAU,SAAAJ,GAAC,OAAKf,EAAoBe,EAAEK,OAAOF,WAGjD,mBAAQnE,UAAW,0BAAnB,sBAlCJ,KAoCI,SAAC,KAAD,CAAgBiF,SAAU,sBCnEtC,SAJA,SAAoCzF,GAC5B,OAAO,gBAAKkB,IAAKlB,EAAMmB,UAAWR,MAAOX,EAAMW,SCiCvD,SA7BA,SAA4BX,GAAQ,IACzBuI,GAAQjH,UAARiH,KADyB,GAGCtI,cAASd,EAA4B,CAClEoC,UAAW,CAACgH,KAAMA,KADdrI,EAHwB,EAGxBA,QAASC,EAHe,EAGfA,MAAOC,EAHQ,EAGRA,KAIxB,GAAIF,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,oCAElBE,QAAQC,IAAIF,GAEZ,IAAIqB,EAAOrB,EAAKoI,eAEhB,OAAS,4BACL,SAACjI,EAAA,EAAD,WAAQ,oDAA4BgI,QACpC,gBAAI/H,UAAU,OAAd,iCAA0C+H,MAC1C,eAAI/H,UAAY,kCAAhB,SACKiB,EAAOf,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIO,EAAd,EAAcA,UAAd,EAAyBc,aAAzB,OACR,eAAazB,UAAW,WAAxB,UACA,SAAC,GAAD,CAA4BI,GAAIA,EAAIK,MAAO,KAAME,UAAWA,EAAWR,MAAOA,KADrEC,SAKjB,SAAC,GAAD,CAAkBD,MAAO4H,EAAM9G,OAAQA,QCf/C,IAAMgH,GAAS,IAAIC,KAAa,CAC5BC,IdfuB,2BcgBvBC,MAAO,IAAIC,OA2Ef,SAvEA,WAGQ,OADJpJ,EbvB4B,gBayBpB,SAAC,EAAAqJ,eAAD,CAAgBL,OAAQA,GAAxB,UAEI,SAAC,KAAD,WACI,6BACI,SAAC,KAAD,CAAOM,KAAK,IAAZ,UACI,SAAC,GAAD,OAEJ,SAAC,KAAD,CAAOA,KAAK,oBAAZ,UACI,SAAC,EAAD,OAGJ,SAAC,KAAD,CAAOA,KAAK,uBAAZ,UACI,SAAC,EAAD,OAGJ,SAAC,KAAD,CAAOA,KAAK,qCAAZ,UACI,SAAC,EAAD,OAGJ,SAAC,KAAD,CAAOA,KAAK,sBAAZ,UACI,SAAC,GAAD,OAIJ,SAAC,KAAD,CAAOC,OAAK,EAACD,KAAK,wBAAlB,UACI,SAAC,GAAD,OAGJ,SAAC,KAAD,CAAOA,KAAK,8BAAZ,UACI,SAAC,GAAD,OAIJ,SAAC,KAAD,CAAOA,KAAK,iBAAZ,UACI,SAAC,GAAD,cC3Dd1B,EAAQ,OAgCtB4B,EA/BmB5B,EAAQ,MAAnB4B,SA+BD,SAAC,GAAD,IAASC,SAASC,eAAe,U","file":"/suilven/flickr-editor/js/index.js","sourcesContent":["import gql from 'graphql-tag';\n\n\nexport const GRAPHQL_API = 'http://localhost/graphql';\n\nexport const TITLE = \"Flickr Set List\";\n\nexport const GET_IMPORTED_FLICKR_SET_LIST = gql`\n {\n  imported_flickr_sets {\n    id\n    title\n    description\n    created_at\n    updated_at,\n    imported\n  }\n}`;\n\nexport const GET_UNIMPORTED_FLICKR_SET_LIST = gql`\n {\n  unimported_flickr_sets {\n    id\n    title\n    description\n    created_at\n    updated_at,\n    imported\n  }\n}`;\n\nexport const GET_FLICKR_PHOTO = gql`\n    query FlickrPhoto($id: Int!) {\n        flickr_photo(id: $id) {\n            id\n            title\n            description\n            small_url\n            small_width\n            small_height\n            large_url\n            large_width\n            large_height\n        }\n    }\n`;\n\n\nexport const GET_FLICKR_SET_PHOTOS = gql`\n    query FlickrSet($id: Int!) {\n        flickr_set(id: $id) {\n            id\n            title\n            description\n            flickrPhotos {\n                id\n                title\n                description\n                small_url\n                small_width\n                small_height\n                large_url\n                large_width\n                large_height\n            }\n        }\n    }\n`;\n\nexport const GET_FLICKR_SET_PHOTO_IDS = gql`\n    query FlickrSet($id: Int!) {\n        flickr_set(id: $id) {\n            id\n            title\n            flickrPhotos {\n                id\n            }\n        }\n    }\n`;\n\nexport const GET_AMOUNT_OF_ORPHAN_PHOTOS_BY_DAY = gql `\n    {\n        number_of_orphaned_photos_by_date {\n            amount_of_photos\n            date_of_photos\n        }\n    }`;\n\nexport const GET_ORPHANED_PHOTOS_BY_DAY =gql`\n    query PhotosByDate($date: String!) {\n        photos_by_date(date:$date) {\n            id\n            title\n            description\n            small_url\n            small_width\n            small_height\n        }\n    }\t\n`;\n\nexport const CREATE_FLICKR_SET = gql`\n    mutation CreateFlickrSet($title: String!, $description: String!) {\n        createFlickrSet(title: $title, description: $description) {\n            id\n            title\n            description\n        }\n    }`;\n\n\nexport const ADD_PHOTOS_TO_FLICKR_SET = gql`\n    mutation AddPhotosToFlickrSet($id: Int!, $photo_ids: [Int!]) {\n        addPhotosToFlickrSet(id: $id, photo_ids: $photo_ids) {\n            id\n            title\n            description\n            flickrPhotos {\n                id\n                title\n                description\n                small_url\n                small_width\n                small_height\n            }\n        }\n    }`;\n\n/*\ngql`\n\n    mutation CreateFlickrSet($title: String!, $description: String!) {\n        createFlickrSet(title: title: $title, description: $description) {\n            id\n            title\n            description\n        }\n    }`;\n    */","\nconst KEY='VISIBLE_SCREEN_NAME';\nexport const FLICKR_SETS_SCREEN='flickr_sets';\nexport const FLICKR_SET_SCREEN='flickr_set';\nexport const FLICKR_PHOTO_SCREEN='flickr_photo';\nexport const FLICKR_UNIMPORTED_SETS_SCREEN='unimported_sets';\nexport const FLICKR_ORPHANED_PHOTOS='flickr_photo_orphan';\n\nexport const setScreen = (name) => {\n    window.localStorage.setItem(KEY, name);\n}\n\nexport const getScreen = () => {\n    return window.localStorage.getItem(KEY);\n}","import React from 'react';\nimport {GET_IMPORTED_FLICKR_SET_LIST} from \"../constants\";\nimport {useQuery} from \"@apollo/client\";\nimport {Link} from \"react-router-dom\";\nimport {Helmet} from 'react-helmet';\nimport {FLICKR_SET_SCREEN, getScreen, setScreen} from \"./Screen\";\n\nfunction FlickrSets(props)  {\n    const { loading, error, data } = useQuery(GET_IMPORTED_FLICKR_SET_LIST);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log(data);\n\n    // see https://reactjs.org/docs/lists-and-keys.html, issue with keys\n\n    console.log('FSETS - getScreen=', getScreen());\n\n    return <div>\n        <Helmet><title>Flickr Sets</title></Helmet>\n        <h1 className=\"pt-4 pb-2\">Imported Sets</h1>\n\n        <ul>\n        {data.imported_flickr_sets.map(({ title, id, imported }) => (\n            <li key={id}>\n                <Link to={`/editor/edit/set/`+id} onClick={setScreen(FLICKR_SET_SCREEN)}>Set {title}</Link>\n            </li>\n        ))}\n        </ul>\n    </div>\n    ;\n}\n\nexport default FlickrSets;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {FLICKR_PHOTO_SCREEN, setScreen} from \"./Screen\";\n\n\nfunction FlickrPhotoThumbnail(props) {\n      return <Link to={'/editor/edit/photo/'+props.id + `/set/`+props.setID} onClick={setScreen(FLICKR_PHOTO_SCREEN)}><img src={props.small_url} title={props.title}/></Link>;\n}\n\nFlickrPhotoThumbnail.defaultProps = {\n    editable: false\n}\n\nexport default FlickrPhotoThumbnail;\n","import React from 'react';\nimport {useQuery} from \"@apollo/client\";\nimport {Helmet} from 'react-helmet';\nimport {useParams} from \"react-router\";\nimport {GET_FLICKR_SET_PHOTOS} from \"../constants\";\nimport FlickrPhotoThumbnail from \"./FlickrPhotoThumbnail\";\n\nfunction FlickrSet() {\n    const {id} = useParams();\n\n\n    const { loading, error, data } = useQuery(GET_FLICKR_SET_PHOTOS, {\n        variables: { id: parseInt(id,10) },\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    let photos=data.flickr_set.flickrPhotos;\n\n        //preloading image\n        photos.forEach((photo) => {\n            const img = new Image();\n            img.src = photo.large_url;\n        });\n\n\n     return  (<div>\n        <Helmet><title>Set: {data.flickr_set.title}</title></Helmet>\n         <h1 className=\"pt-4 pb-4\">{data.flickr_set.title}</h1>\n        <ul className = \"grid grid-cols-1 md:grid-cols-6\" >\n        {photos.map(({ title, id, small_url, small_height }, index) => (\n            <li key={id} className={\"setPhoto\"}>\n                <FlickrPhotoThumbnail id={id}  setID={data.flickr_set.id} small_url={small_url} title={title} editable={true}/>\n            </li>\n        ))}\n    </ul></div>)\n\n     ;\n}\n\nexport default FlickrSet;\n","import React, {useEffect, useState} from 'react';\nimport {useMutation, useQuery} from \"@apollo/client\";\nimport gql from 'graphql-tag';\nimport {Link, useHistory} from \"react-router-dom\";\nimport {Helmet} from \"react-helmet\";\nimport {FLICKR_PHOTO_SCREEN, setScreen} from \"./Screen\";\nimport {useParams} from \"react-router\";\nimport {GET_FLICKR_PHOTO, GET_FLICKR_SET_PHOTO_IDS} from \"../constants\";\nimport {toast, ToastContainer} from 'react-toastify';\n//const [todoInput, setTodoInput] = useState('');\n\nconst UPDATE_PHOTO = gql`\n  mutation UpdatePhoto($id: Int!, $title: String!, $description: String!) {\n    update_photo(id: $id, title: $title, description: $description) {\n      id\n      title\n      description\n    }\n  }\n`;\n\n\n// see https://stackoverflow.com/questions/42036865/react-how-to-navigate-through-list-by-arrow-keys\n// @todo Separate this for other components to use\nconst useKeyPress = function(targetKey) {\n    const [keyPressed, setKeyPressed] = useState(false);\n\n    function downHandler({ key }) {\n        if (key === targetKey) {\n            setKeyPressed(true);\n        }\n    }\n\n    const upHandler = ({ key }) => {\n\n        if (key === targetKey) {\n            setKeyPressed(false);\n        }\n    };\n\n    React.useEffect(() => {\n        window.addEventListener(\"keydown\", downHandler);\n        window.addEventListener(\"keyup\", upHandler);\n\n        return () => {\n            window.removeEventListener(\"keydown\", downHandler);\n            window.removeEventListener(\"keyup\", upHandler);\n        };\n    }, []); // see https://stackoverflow.com/questions/59546928/keydown-up-events-with-react-hooks-not-working-properly\n\n    return keyPressed;\n};\n\nconst FlickrPhotoForm = (props) => {\n    const [leftKeyPressCount, setLeftKeyPressCount] = useState(0);\n    const [rightKeyPressCount, setRightKeyPressCount] = useState(0);\n\n    let history = useHistory();\n    let photo = props.photo;\n\n    setScreen(FLICKR_PHOTO_SCREEN);\n\n    const [titleInput, setTitleInput] = useState(photo.title);\n    const [descriptionInput, setDescriptionInput] = useState(photo.description);\n    const leftPress = useKeyPress(\"ArrowLeft\");\n    const rightPress = useKeyPress(\"ArrowRight\");\n\n\n    useEffect(() => {\n        let ids = props.photoIDS;\n        let index= ids.indexOf(Number(photo.id));\n        let prevID = index > 0 ? ids[index-1] : null;\n\n        // 1) Ignore key presses other than the first one.   Note that this function is called prior to key being\n        // pressed, as such need to check the keyPressCount state\n        // 2) If nextID is not defined we are at the last image\n        if (leftKeyPressCount >= 1 && prevID !== null && prevID !== undefined) {\n            let url='/editor/edit/photo/' + prevID + '/set/'  + props.setID;\n            history.push(url);\n        } else {\n            setRightKeyPressCount(0);\n        }\n\n        setLeftKeyPressCount(leftKeyPressCount+1);\n\n\n    }, [leftPress]);\n\n    useEffect(() => {\n        let ids = props.photoIDS;\n\n        let index= ids.indexOf(Number(photo.id));\n        let nextID = index < ids.length-1 ? ids[index+1] : null;\n\n        // 1) Ignore key presses other than the first one.   Note that this function is called prior to key being\n        // pressed, as such need to check the keyPressCount state\n        // 2) If nextID is not defined we are at the last image\n        if (rightKeyPressCount >= 1 && nextID !== null && nextID !== undefined) {\n            let url='/editor/edit/photo/' + nextID + '/set/'  + props.setID;\n            history.push(url);\n        } else {\n            setLeftKeyPressCount(0);\n        }\n\n        setRightKeyPressCount(rightKeyPressCount+1);\n\n\n    }, [rightPress]);\n\n\n    // @TODO\n    const updateCache = (cache, {data}) => {\n        // If this is for the public feed, do nothing\n        if (isPublic) {\n            return null;\n        }\n        // Fetch the todos from the cache\n        const existingTodos = cache.readQuery({\n            query: GET_MY_TODOS\n        });\n        // Add the new todo to the cache\n        const newTodo = data.insert_todos.returning[0];\n        cache.writeQuery({\n            query: GET_MY_TODOS,\n            data: {todos: [newTodo, ...existingTodos.todos]}\n        });\n    };\n\n    const [updatePhoto] = useMutation(UPDATE_PHOTO);\n\n    return (\n        <form className=\"formInput\" className={\"form p-10\"} onSubmit={(e) => {\n            e.preventDefault();\n            updatePhoto({variables: {id: parseInt(photo.id), title: titleInput, description: descriptionInput }});\n            toast('Image information updated');\n        }}>\n            <input\n                className=\"input border\"\n                value={titleInput}\n                onChange={e => (setTitleInput(e.target.value))}\n            />\n\n            <textarea\n                className=\"input border\"\n                value={descriptionInput}\n                onChange={e => (setDescriptionInput(e.target.value))}\n            />\n\n            <button className={\"border rounded my-6 p-3\"}>Save</button>\n        </form>\n\n    );\n};\n\n\nconst prevID = (ids, id) =>\n{\n    let index= ids.indexOf(Number(id)); //Number(photo.id));\n    return index > 0 ? ids[index-1] : null;\n}\n\nconst nextID = (ids, id) =>\n{\n    let index= ids.indexOf(Number(id)); //Number(photo.id));\n    return index < ids.length-1 ? ids[index+1] : null;\n}\n\nconst PrevPhotoLink = (props) => {\n    let previousID = prevID(props.ids, props.id);\n    return previousID === null ? null : <div className={\"previousLink\"}><Link to={'/editor/edit/photo/' + previousID + '/set/' + props.set_id} >❮</Link></div>;\n}\n\nconst NextPhotoLink = (props) => {\n    let theNextID = nextID(props.ids, props.id);\n    return theNextID === null? null : <div className={\"nextLink\"}> <Link to={'/editor/edit/photo/' + theNextID + '/set/' + props.set_id} >❯</Link></div>;\n}\n\n\nconst getFlickrPhotoIDsAndTitle = (set_id) => {\n    const { loading, error, data } = useQuery(GET_FLICKR_SET_PHOTO_IDS, {\n        variables: { id: parseInt(set_id,10) },\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    var flickrPHotoObjs = data.flickr_set.flickrPhotos;\n    const ids = flickrPHotoObjs.map(photo => Number(photo.id));\n\n    let result = [];\n    result['ids'] = ids;\n    result['title'] = data.flickr_set.title;\n    return result;\n}\n\n\nfunction FlickrPhoto(props) {\n    const {id,set_id} = useParams();\n\n\n    let setInfo = getFlickrPhotoIDsAndTitle(set_id);\n    let setPhotoIDS = setInfo['ids'];\n\n    const { loading, error, data } = useQuery(GET_FLICKR_PHOTO, {\n        variables: { id: parseInt(id,10) },\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    let photo = data.flickr_photo;\n\n    return <div className={'singlePhoto'}><Helmet><title>Photo: {photo.title}</title></Helmet>\n        <h1 className={\"pt-4 pb-4\"}><a href={\"/editor/edit/set/\" + set_id}>{setInfo.title}</a></h1>\n            <h4 className={\"pb-4\"}>&nbsp;&nbsp;{photo.title}</h4>\n        <div className={\"inner\"}>\n        <img src={photo.large_url} title={photo.title} />\n        <PrevPhotoLink id={id} ids={setPhotoIDS} set_id={set_id}/>\n        <NextPhotoLink id={id} ids={setPhotoIDS} set_id={set_id}/>\n        </div>\n        <FlickrPhotoForm photo={photo} photoIDS={setPhotoIDS} setID={set_id}/>\n        <ToastContainer position={\"bottom-center\"}/>\n    </div>;\n}\n\nexport default FlickrPhoto;\n","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Helmet} from 'react-helmet';\nimport {HOME_TAB} from \"./HomePanel\";\n\n\n\nfunction IntroPage(props)  {\n    const {selectedTab, children} = props;\n    if (selectedTab === HOME_TAB) {\n        return <div>\n            <h1 className={\"pt-4\"}>Welcome to Flickr Editor!</h1>\n            Intro blurb\n\n            ST={selectedTab}\n        </div>\n            ;\n    } else {\n        return null;\n    }\n}\n\nexport default IntroPage;\n","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Helmet} from 'react-helmet';\nimport IntroPage from \"./IntroPage\";\nexport const HOME_TAB='Home';\nconst EDIT_IMPORTED_TAB='Edit Imported Sets';\nconst IMPORT_UNIMPORTED_TAB='Import Unimported Sets';\nconst ORPHAN_TAB='Organise Orphan Photos';\nconst STATUS_TAB='Status';\n\nconst Tab = props => {\n    const {selectedTab, setSelectedTab, children} = props;\n    console.log('Tab props', props);\n    return <button className={\"tab\" + (props.name === selectedTab ? ' active' : '')} onClick={() => {setSelectedTab(props.name);}}>\n        <Link to={props.link}>{props.name}</Link>\n    </button>;\n}\n\nfunction HomePanel(props)  {\n    // @todo get the relevant tab from the route\n    const [selectedTab, setSelectedTab] = useState(HOME_TAB);\n\n    return <div>\n        <Helmet><title>Flickr Editor</title></Helmet>\n            <nav className={'flex flex-row sm:flex-row'}>\n                <Tab name={HOME_TAB} link={\"/editor\"} setSelectedTab={setSelectedTab} selectedTab={selectedTab} />\n                <Tab name={EDIT_IMPORTED_TAB} link={\"/editor/edit/sets\"} setSelectedTab={setSelectedTab}  selectedTab={selectedTab}/>\n                <Tab name={IMPORT_UNIMPORTED_TAB} link={\"/editor/import/sets\"} setSelectedTab={setSelectedTab}  selectedTab={selectedTab}/>\n                <Tab name={ORPHAN_TAB} link={\"/editor/orphan/photos\"} setSelectedTab={setSelectedTab}  selectedTab={selectedTab}/>\n                <Tab name={STATUS_TAB} link={\"/editor/status\"} setSelectedTab={setSelectedTab}  selectedTab={selectedTab}/>\n            </nav>\n            <IntroPage selectedTab={selectedTab}/>\n        </div>\n    ;\n}\n\nexport default HomePanel;\n","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {VictoryAxis, VictoryBar, VictoryChart, VictoryTooltip} from \"victory\";\nimport {useQuery} from \"@apollo/client\";\nimport {GET_AMOUNT_OF_ORPHAN_PHOTOS_BY_DAY} from \"../../constants\";\nimport {useHistory} from \"react-router-dom\";\n\n\nfunction OrphanedPanel(props)  {\n    let history = useHistory();\n\n    const { loading, error, data } = useQuery(GET_AMOUNT_OF_ORPHAN_PHOTOS_BY_DAY);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log(data);\n\n    // @todo maybe try this https://formidable.com/open-source/victory/gallery/brush-and-zoom, note it has dates\n    let amountsByDate = data.number_of_orphaned_photos_by_date;\n    let graphData = [];\n    for (let i=0; i< amountsByDate.length; i++) {\n        let row = {x:i+1, y:amountsByDate[i].amount_of_photos, label: amountsByDate[i].date_of_photos};\n        graphData.push(row);\n    }\n\n\n    return <div>\n        <Helmet><title>Orphaned Images</title></Helmet>\n           <h1 className={\"pt-4 pb-2\"}>Orphaned images</h1>\n        <VictoryChart>\n\n            <VictoryAxis\n                dependentAxis\n                // tickFormat specifies how ticks should be displayed\n                tickFormat={(x) => x}\n            />\n            <VictoryBar\n                labelComponent={<VictoryTooltip/>}\n                style={{ data: { fill: \"#aaa\" } }}\n                data={graphData}\n\n                events={[\n                    {\n                        target: \"data\",\n                        eventHandlers: {\n                            onClick: (e, clickedProps) => {\n                                console.log('Clicked bar', clickedProps.datum.label);\n                                history.push( \"/editor/orphan/photos/\" + clickedProps.datum.label );\n                            }\n                        }\n                    }\n                ]}\n            />\n        </VictoryChart>\n\n        </div>\n    ;\n}\n\nexport default OrphanedPanel;\n","import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useQuery} from \"@apollo/client\";\nimport {GET_UNIMPORTED_FLICKR_SET_LIST} from \"../../constants\";\nimport {FLICKR_SET_SCREEN, getScreen, setScreen} from \"../Screen\";\nimport {Link} from \"react-router-dom\";\n\nfunction UnimportedPanel(props)  {\n    const { loading, error, data } = useQuery(GET_UNIMPORTED_FLICKR_SET_LIST);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log(data);\n\n    // see https://reactjs.org/docs/lists-and-keys.html, issue with keys\n\n    console.log('FSETS - getScreen=', getScreen());\n\n    return <div>\n        <Helmet><title>Unimported Flickr Sets</title></Helmet>\n        <h1 className=\"pt-4 pb-2\">Unimported Sets</h1>\n\n        <ul>\n        {data.unimported_flickr_sets.map(({ title, id, imported }) => (\n                <li key={id}>\n                    <Link to={`/edit/set/`+id} onClick={setScreen(FLICKR_SET_SCREEN)}>{title}</Link>\n                </li>\n        ))}\n        </ul>\n    </div>\n        ;\n}\n\nexport default UnimportedPanel;\n","import React, {useEffect} from 'react';\nimport {Helmet} from 'react-helmet';\n\nimport Echo from \"laravel-echo\"\n\nwindow.Pusher = require('pusher-js');\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'todoappkey',\n    wsHost: window.location.hostname,\n    wsPort: 6001,\n    forceTLS: false,\n    disableStats: true,\n});\n\n\n\n\nfunction StatusPanel(props)  {\n    useEffect(() => {\n        console.log('Status panel use effect');\n\n        window.Echo.channel('flickr.photos').listen('.exif.processed', (e) => {\n            console.log('FlickrPhotoExifProcessed', e);\n        })\n            .listen('.test',(e) => {\n                console.log('test', e);\n            })\n\n            .listen('.photo.imported',(e) => {\n                console.log('Photo imported', e);\n            })\n\n            .listen('.orphan.imported',(e) => {\n                console.log('Orphan photo imported', e);\n            })\n\n\n        return function cleanup() {\n            console.log('Status panel clean up')\n            // Echo.leave('flickr.photos');\n        };\n    });\n\n    return <div>\n        <Helmet><title>Status Panel</title></Helmet>\n           <h1 className={\"pt-4\"}>Status Panel</h1>\n\n        </div>\n    ;\n}\n\nexport default StatusPanel;\n","import React, {useState} from 'react';\nimport {useMutation} from \"@apollo/client\";\nimport {useHistory} from \"react-router-dom\";\nimport {toast, ToastContainer} from 'react-toastify';\nimport {ADD_PHOTOS_TO_FLICKR_SET, CREATE_FLICKR_SET} from \"../../constants\";\n\nconst NewFlickrSetForm = (props) => {\n    // setScreen(FLICKR_PHOTO_SCREEN);\n    let history = useHistory();\n\n    const [titleInput, setTitleInput] = useState(props.title);\n    const [descriptionInput, setDescriptionInput] = useState('');\n\n    // @TODO\n    const updateCache = (cache, {data}) => {\n        // If this is for the public feed, do nothing\n        if (isPublic) {\n            return null;\n        }\n        // Fetch the todos from the cache\n        const existingTodos = cache.readQuery({\n            query: GET_MY_TODOS\n        });\n        // Add the new todo to the cache\n        const newTodo = data.insert_todos.returning[0];\n        cache.writeQuery({\n            query: GET_MY_TODOS,\n            data: {todos: [newTodo, ...existingTodos.todos]}\n        });\n    };\n\n    const [createFlickrSet] = useMutation(CREATE_FLICKR_SET);\n    const [addPhotosToSet] = useMutation(ADD_PHOTOS_TO_FLICKR_SET);\n    console.log('NEW FLICKR SET FORM:', props);\n    const photoIDs = props.photos.map(photo => Number(photo.id));\n\n    return (\n        <div>\n        <form className=\"formInput\" className={\"form p-10\"} onSubmit={(e) => {\n            e.preventDefault();\n            createFlickrSet({variables: { title: titleInput, description: descriptionInput }})\n                .then((response) => {\n                    toast('Flickr Set Created');\n\n                    console.log('PROMISE' , response.data.createFlickrSet);\n                    var setID = Number(response.data.createFlickrSet.id);\n                    console.log('Set id', setID);\n                    console.log('IN PROMISE RESPONSE PHOTO IDS', photoIDs);\n\n                    addPhotosToSet({variables: { id: setID, photo_ids: photoIDs }})\n                        .then((response) => {\n                            toast('Images added');\n                            console.log('After updating set images', response);\n                            history.push('/editor/edit/set/' + response.data.addPhotosToFlickrSet.id);\n                        })\n\n                })\n            ;\n\n        }}>\n            <input\n                className=\"input border\"\n                value={titleInput}\n                onChange={e => (setTitleInput(e.target.value))}\n            />\n\n            <textarea\n                className=\"input border\"\n                value={descriptionInput}\n                onChange={e => (setDescriptionInput(e.target.value))}\n            />\n\n            <button className={\"border rounded my-6 p-3\"}>Create</button>\n        </form>\n            <ToastContainer position={\"bottom-center\"}/>\n        </div>\n\n    );\n};\n\n\nexport default NewFlickrSetForm;","import React from 'react';\n\n\nfunction FlickrPhotoOrphanThumbnail(props) {\n        return <img src={props.small_url} title={props.title}/>\n}\n\nexport default FlickrPhotoOrphanThumbnail;\n","import React from 'react';\nimport {useParams} from \"react-router\";\nimport {GET_ORPHANED_PHOTOS_BY_DAY} from \"../../constants\";\nimport {useQuery} from \"@apollo/client\";\nimport {Helmet} from \"react-helmet\";\nimport NewFlickrSetForm from \"./NewFlickrSetForm\";\nimport FlickrPhotoOrphanThumbnail from \"../FlickrPhotoOrphanThumbnail\";\n\nfunction PhotosForDatePanel(props)  {\n    const {date} = useParams();\n\n    const { loading, error, data } = useQuery(GET_ORPHANED_PHOTOS_BY_DAY, {\n        variables: {date: date}\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log(data);\n\n    let photos=data.photos_by_date;\n\n    return  (<div>\n        <Helmet><title>Orphaned Photos for {date}</title></Helmet>\n        <h1 className=\"pt-4\">Orphaned Images for {date}</h1>\n        <ul className = \"grid grid-cols-1 md:grid-cols-6\" >\n            {photos.map(({ title, id, small_url, small_height }) => (\n                <li key={id} className={\"setPhoto\"}>\n                <FlickrPhotoOrphanThumbnail id={id} setID={null} small_url={small_url} title={title} />\n                </li>\n            ))}\n        </ul>\n        <NewFlickrSetForm title={date} photos={photos} />\n    </div>)\n\n}\n\nexport default PhotosForDatePanel;\n","import React, {Fragment} from 'react';\nimport {ApolloClient, ApolloProvider, InMemoryCache} from '@apollo/client';\nimport {GRAPHQL_API} from \"./constants\";\nimport FlickrSets from \"./components/FlickrSets\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport FlickrSet from \"./components/FlickrSet\";\nimport FlickrPhoto from \"./components/FlickrPhoto\";\nimport {FLICKR_SETS_SCREEN, setScreen} from \"./components/Screen\";\nimport HomePanel from \"./components/HomePanel\";\nimport OrphanedPanel from \"./components/orphaned/OrphanedPanel\";\nimport UnimportedPanel from \"./components/unimported/UnimportedPanel\";\nimport StatusPanel from \"./components/status/StatusPanel\";\nimport PhotosForDatePanel from \"./components/orphaned/PhotosForDatePanel\";\n\n\n//import FlickrSet from \"./components/FlickrSet\";\n\nconst client = new ApolloClient({\n    uri: GRAPHQL_API,\n    cache: new InMemoryCache()\n});\n\n\nfunction App() {\n\n    setScreen(FLICKR_SETS_SCREEN);\n        return (\n            <ApolloProvider client={client}>\n\n                <Router>\n                    <main>\n                        <Route path=\"/\">\n                            <HomePanel />\n                        </Route>\n                        <Route path=\"/editor/edit/sets\">\n                            <FlickrSets />\n                        </Route>\n\n                        <Route path=\"/editor/edit/set/:id\">\n                            <FlickrSet />\n                        </Route>\n\n                        <Route path=\"/editor/edit/photo/:id/set/:set_id\">\n                            <FlickrPhoto />\n                        </Route>\n\n                        <Route path=\"/editor/import/sets\">\n                            <UnimportedPanel />\n                        </Route>\n\n\n                        <Route exact path=\"/editor/orphan/photos\">\n                            <OrphanedPanel />\n                        </Route>\n\n                        <Route path=\"/editor/orphan/photos/:date\">\n                            <PhotosForDatePanel />\n                        </Route>\n\n\n                        <Route path=\"/editor/status\">\n                            <StatusPanel />\n                        </Route>\n\n                    </main>\n                </Router>\n            </ApolloProvider>);\n\n}\n\n\n\nconst About = ({match:{params:{id}}}) => (\n    // props.match.params.name\n    <Fragment>\n        <h1>About {id}</h1>\n        <FakeText />\n    </Fragment>\n);\n\nconst Contact = () => (\n    <Fragment>\n        <h1>Contact</h1>\n        <FakeText />\n    </Fragment>\n);\n\n\nconst FakeText = () => (\n    <Fragment>\n        <p>Lorem ipsum blah blah</p>\n    </Fragment>\n);\n\nexport default App;\n","import App from \"./App\";\n\nconst React = require('react')\nconst { render } = require('react-dom')\n//const { Provider } = require('react-redux')\n//const { createStore } = require('redux')\n//const reducers = require('./modules')\n//const routes = require('./routes.js')\n\n/*\nmodule.exports = render((\n    <Provider store={createStore(reducers)}>\n        {routes}\n    </Provider>\n), document.getElementById('root'))\n */\n\n\n\n\n\n/*\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <div>\n                <h2>My first Apollo app 🚀</h2>\n            </div>\n        </ApolloProvider>\n    );\n}\n\n */\n\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}