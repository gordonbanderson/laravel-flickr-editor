{"version":3,"sources":["webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/constants.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/Screen.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrSets.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrSet.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/FlickrPhoto.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/components/HomePanel.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/App.js","webpack://suilven-flickr-editor/./resources/flickr-edit-app/src/index.js"],"names":["GET_FLICKR_SET_LIST","gql","GET_FLICKR_PHOTO","GET_FLICKR_SET_PHOTOS","GET_FLICKR_SET_PHOTO_IDS","KEY","FLICKR_PHOTO_SCREEN","setScreen","name","window","localStorage","setItem","getScreen","getItem","props","useQuery","loading","error","data","console","log","Helmet","flickr_sets","map","title","id","to","onClick","toString","useParams","variables","parseInt","flickr_set","photos","flickrPhotos","className","small_url","small_height","src","UPDATE_PHOTO","FlickrPhotoForm","photo","useState","titleInput","setTitleInput","description","descriptionInput","setDescriptionInput","updatePhoto","useMutation","e","preventDefault","toast","value","onChange","target","nextID","ids","i","length","PrevPhotoLink","previousID","prevID","set_id","NextPhotoLink","theNextID","setPhotoIDS","flickrPHotoObjs","push","getFlickrPhotoIDs","flickr_photo","large_url","client","ApolloClient","uri","cache","InMemoryCache","ApolloProvider","path","require","render","document","getElementById"],"mappings":"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","file":"/suilven/flickr-editor/js/index.js","sourcesContent":["import gql from 'graphql-tag';\n\n\nexport const GRAPHQL_API = 'http://localhost/graphql';\n\nexport const TITLE = \"Flickr Set List\";\n\nexport const GET_FLICKR_SET_LIST = gql`\n {\n  flickr_sets {\n    id\n    title\n    description\n    created_at\n    updated_at\n  }\n}`;\n\nexport const GET_FLICKR_PHOTO = gql`\n    query FlickrPhoto($id: Int!) {\n        flickr_photo(id: $id) {\n            id\n            title\n            description\n            small_url\n            small_width\n            small_height\n            large_url\n            large_width\n            large_height\n        }\n    }\n`;\n\n\nexport const GET_FLICKR_SET_PHOTOS = gql`\n    query FlickrSet($id: Int!) {\n        flickr_set(id: $id) {\n            id\n            title\n            description\n            flickrPhotos {\n                title\n                description\n                small_url\n                small_width\n                small_height\n                id\n            }\n        }\n    }\n`;\n\nexport const GET_FLICKR_SET_PHOTO_IDS = gql`\n    query FlickrSet($id: Int!) {\n        flickr_set(id: $id) {\n            id\n            flickrPhotos {\n                id\n            }\n        }\n    }\n`;","\nconst KEY='VISIBLE_SCREEN_NAME';\nexport const FLICKR_SETS_SCREEN='flickr_sets';\nexport const FLICKR_SET_SCREEN='flickr_set';\nexport const FLICKR_PHOTO_SCREEN='flickr_photo';\n\nexport const setScreen = (name) => {\n    window.localStorage.setItem(KEY, name);\n}\n\nexport const getScreen = () => {\n    return window.localStorage.getItem(KEY);\n}","import React from 'react';\nimport {GET_FLICKR_SET_LIST} from \"../constants\";\nimport {useQuery} from \"@apollo/client\";\nimport {Link} from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\nimport {FLICKR_SET_SCREEN, FLICKR_SETS_SCREEN, getScreen, setScreen} from \"./Screen\";\n\nfunction FlickrSets(props)  {\n    const { loading, error, data } = useQuery(GET_FLICKR_SET_LIST);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log(data);\n\n    // see https://reactjs.org/docs/lists-and-keys.html, issue with keys\n\n    console.log('FSETS - getScreen=', getScreen());\n\n    return <div>\n        <Helmet><title>Flickr Sets</title></Helmet>\n\n        {data.flickr_sets.map(({ title, id }) => (\n        <ul>\n            <li key={id.toString()}>\n                <Link to={`/edit/set/`+id} onClick={setScreen(FLICKR_SET_SCREEN)}>Set {title}</Link>\n            </li>\n        </ul>\n        ))}</div>\n    ;\n}\n\nexport default FlickrSets;\n","import React from 'react';\nimport {useQuery} from \"@apollo/client\";\nimport gql from 'graphql-tag';\nimport {Link} from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\nimport {FLICKR_PHOTO_SCREEN, FLICKR_SET_SCREEN, FLICKR_SETS_SCREEN, getScreen, setScreen} from \"./Screen\";\nimport  { useParams } from \"react-router\";\nimport {GET_FLICKR_SET_PHOTOS} from \"../constants\";\n\nfunction FlickrSet() {\n    const {id} = useParams();\n\n\n    console.log('FS ID', id);\n\n    /*\n    query ($limit: Int!) {\n          flickr_set(limit: $limit) {\n            id\n            title\n          }\n        }\n     */\n    const { loading, error, data } = useQuery(GET_FLICKR_SET_PHOTOS, {\n        variables: { id: parseInt(id,10) },\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log('Data', data.flickr_set);\n\n    /*\n    render() {\n    return (<div>\n    {this.state.people.map((person, index) => (\n        <p>Hello, {person.name} from {person.country}!</p>\n    ))}\n    </div>);\n}\n     */\n\n    let photos=data.flickr_set.flickrPhotos;\n\n     return  (<div>\n        <Helmet><title>Set: {data.flickr_set.title}</title></Helmet>\n        <div className = \"grid grid-cols-1 md:grid-cols-6\" >\n        {photos.map(({ title, id, small_url, small_height }) => (\n            <div className={\"setPhoto\"} key={id.toString()}>\n                <Link to={'/edit/photo/'+id + `/set/`+data.flickr_set.id} onClick={setScreen(FLICKR_PHOTO_SCREEN)}><img src={small_url} title={title}/></Link>\n            </div>\n        ))}\n    </div></div>)\n\n     ;\n}\n\nexport default FlickrSet;\n","import React, {useState} from 'react';\nimport {useQuery, useMutation} from \"@apollo/client\";\nimport gql from 'graphql-tag';\nimport {Link} from \"react-router-dom\";\nimport {Helmet} from \"react-helmet\";\nimport {FLICKR_PHOTO_SCREEN, getScreen, setScreen} from \"./Screen\";\nimport {useParams} from \"react-router\";\nimport {GET_FLICKR_PHOTO, GET_FLICKR_SET_PHOTO_IDS} from \"../constants\";\nimport {toast} from 'react-toastify';\n\n//const [todoInput, setTodoInput] = useState('');\n\nconst UPDATE_PHOTO = gql`\n  mutation UpdatePhoto($id: Int!, $title: String!, $description: String!) {\n    update_photo(id: $id, title: $title, description: $description) {\n      id\n      title\n      description\n    }\n  }\n`;\n\n\nconst FlickrPhotoForm = (props) => {\n    let photo = props.photo;\n    setScreen(FLICKR_PHOTO_SCREEN);\n\n    const [titleInput, setTitleInput] = useState(photo.title);\n    const [descriptionInput, setDescriptionInput] = useState(photo.description);\n\n    // @TODO\n    const updateCache = (cache, {data}) => {\n        // If this is for the public feed, do nothing\n        if (isPublic) {\n            return null;\n        }\n        // Fetch the todos from the cache\n        const existingTodos = cache.readQuery({\n            query: GET_MY_TODOS\n        });\n        // Add the new todo to the cache\n        const newTodo = data.insert_todos.returning[0];\n        cache.writeQuery({\n            query: GET_MY_TODOS,\n            data: {todos: [newTodo, ...existingTodos.todos]}\n        });\n    };\n\n    const [updatePhoto] = useMutation(UPDATE_PHOTO);\n\n    console.log('Form', props);\n\n\n    return (\n        <form className=\"formInput\" className={\"form p-10\"} onSubmit={(e) => {\n            e.preventDefault();\n            updatePhoto({variables: {id: parseInt(photo.id), title: titleInput, description: descriptionInput }});\n            toast('Image information updated');\n        }}>\n            <input\n                className=\"input border\"\n                value={titleInput}\n                onChange={e => (setTitleInput(e.target.value))}\n            />\n\n            <textarea\n                className=\"input border\"\n                value={descriptionInput}\n                onChange={e => (setDescriptionInput(e.target.value))}\n            />\n\n            <button className={\"border rounded my-6 p-3\"}>Save</button>\n        </form>\n\n    );\n};\n\n\nconst prevID = (ids, id) =>\n{\n    var prevID = null;\n    for (let i=0; i < ids.length; i++) {\n        if (ids[i] == id) {\n            break;\n        }\n\n        prevID = ids[i];\n    }\n\n    return prevID;\n}\n\n\n\nconst nextID = (ids, id) =>\n{\n    var nextID = null;\n    for (let i=ids.length; i >= 0; i--) {\n        if (ids[i] == id) {\n            break;\n        }\n\n        nextID = ids[i];\n    }\n\n    return nextID;\n}\n\nconst PrevPhotoLink = (props) => {\n    console.log('PREV', props)\n    let previousID = prevID(props.ids, props.id);\n    console.log('PREVIOUS ID=', previousID)\n    if (previousID === null) {\n        return null;\n    } else {\n        return <Link to={'/edit/photo/' + previousID + '/set/' + props.set_id} >Previous</Link>\n    }\n}\n\nconst NextPhotoLink = (props) => {\n    let theNextID = nextID(props.ids, props.id);\n    console.log('NEXT ID=', nextID)\n    if (theNextID === null) {\n        return null;\n    } else {\n        return <Link to={'/edit/photo/' + theNextID + '/set/' + props.set_id} >Next</Link>\n    }\n}\n\n\nconst getFlickrPhotoIDs = (set_id) => {\n    console.log('Getting photo ids......')\n    const { loading, error, data } = useQuery(GET_FLICKR_SET_PHOTO_IDS, {\n        variables: { id: parseInt(set_id,10) },\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n\n    // @todo map instead of noddy code\n\n    var ids=[];\n    var flickrPHotoObjs = data.flickr_set.flickrPhotos;\n    for(let i=0; i< flickrPHotoObjs.length; i++) {\n        ids.push(flickrPHotoObjs[i].id);\n    }\n\n    console.log('IDS', ids);\n\n    return ids;\n}\n\n\n\n\nfunction FlickrPhoto(props) {\n    const {id,set_id} = useParams();\n\n    let setPhotoIDS = getFlickrPhotoIDs(set_id);\n\n    const { loading, error, data } = useQuery(GET_FLICKR_PHOTO, {\n        variables: { id: parseInt(id,10) },\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    console.log('Photo Data', data);\n    let photo = data.flickr_photo;\n\n\n    console.log('FPHOTO - getScreen=', getScreen());\n\n\n    return <div className={'singlePhoto'}><Helmet><title>Photo: {photo.title}</title></Helmet>\n        <PrevPhotoLink id={id} ids={setPhotoIDS} set_id={set_id}/>\n        <NextPhotoLink id={id} ids={setPhotoIDS} set_id={set_id}/>\n        <img src={photo.large_url} title={photo.title}/>\n        <FlickrPhotoForm photo={photo}/>\n    </div>;\n}\n\nexport default FlickrPhoto;\n","import React from 'react';\nimport {GET_FLICKR_SET_LIST} from \"../constants\";\nimport {useQuery} from \"@apollo/client\";\nimport {Link} from \"react-router-dom\";\nimport { Helmet } from 'react-helmet';\nimport {FLICKR_SET_SCREEN, FLICKR_SETS_SCREEN, getScreen, setScreen} from \"./Screen\";\n\nfunction HomePanel(props)  {\n\n\n    return <div>\n        <Helmet><title>Flickr Editor</title></Helmet>\n            <nav className={'flex flex-row sm:flex-row'}>\n                <button className=\"tab active\">\n                    <Link to={'edit/sets'}>Edit Imported Sets</Link>\n                </button>\n                <button className=\"tab\">\n                    <Link to={'/import/sets'}>Import Unimported Sets</Link>\n                </button>\n                <button className=\"tab\">\n                    <Link to={'/orphan/photos'}>Organise Orphan Photos</Link>\n                </button>\n            </nav>\n        </div>\n    ;\n}\n\nexport default HomePanel;\n","import React, {useState, useEffect, Fragment} from 'react';\nimport {ApolloClient, ApolloProvider, InMemoryCache} from '@apollo/client';\nimport {GRAPHQL_API} from \"./constants\";\nimport FlickrSets from \"./components/FlickrSets\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport FlickrSet from \"./components/FlickrSet\";\nimport FlickrPhoto from \"./components/FlickrPhoto\";\nimport {FLICKR_SETS_SCREEN, setScreen} from \"./components/Screen\";\nimport HomePanel from \"./components/HomePanel\";\n\n//import FlickrSet from \"./components/FlickrSet\";\n\nconst client = new ApolloClient({\n    uri: GRAPHQL_API,\n    cache: new InMemoryCache()\n});\n\n\nfunction App() {\n    setScreen(FLICKR_SETS_SCREEN);\n        return (\n            <ApolloProvider client={client}>\n\n                <Router>\n                    <main>\n                        <Route path=\"/\">\n                            <HomePanel />\n                        </Route>\n\n                        <Route path=\"/edit/sets\">\n                            <FlickrSets />\n                        </Route>\n\n                        <Route path=\"/edit/set/:id\">\n                            <FlickrSet />\n                        </Route>\n\n                        <Route path=\"/edit/photo/:id/set/:set_id\">\n                            <FlickrPhoto />\n                        </Route>\n\n                    </main>\n                </Router>\n            </ApolloProvider>);\n\n}\n\n\n\nconst About = ({match:{params:{id}}}) => (\n    // props.match.params.name\n    <Fragment>\n        <h1>About {id}</h1>\n        <FakeText />\n    </Fragment>\n);\n\nconst Contact = () => (\n    <Fragment>\n        <h1>Contact</h1>\n        <FakeText />\n    </Fragment>\n);\n\n\nconst FakeText = () => (\n    <Fragment>\n        <p>Lorem ipsum blah blah</p>\n    </Fragment>\n);\n\nexport default App;\n","import {GRAPHQL_API} from \"./constants\";\nimport * as Constants from './constants';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport App from \"./App\";\n\nconst React = require('react')\nconst { render } = require('react-dom')\n//const { Provider } = require('react-redux')\n//const { createStore } = require('redux')\n//const reducers = require('./modules')\n//const routes = require('./routes.js')\n\n/*\nmodule.exports = render((\n    <Provider store={createStore(reducers)}>\n        {routes}\n    </Provider>\n), document.getElementById('root'))\n */\n\n\n\n\n\n/*\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <div>\n                <h2>My first Apollo app 🚀</h2>\n            </div>\n        </ApolloProvider>\n    );\n}\n\n */\n\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}